{
    "version": "https://jsonfeed.org/version/1",
    "title": "anindyabiswas.io",
    "description": "",
    "home_page_url": "http://anindyabiswas.io",
    "feed_url": "http://anindyabiswas.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Anindya Biswas"
    },
    "items": [
        {
            "id": "http://anindyabiswas.io/raspberry-pi-4-desktop-project.html",
            "url": "http://anindyabiswas.io/raspberry-pi-4-desktop-project.html",
            "title": "Raspberry Pi 4 Development Desktop Project",
            "summary": "Story So Far, Raspberry Pi Foundation, released an 8 GB RAM model of it's Raspberry Pi 4 this year along with USB booting. This thing got me thinking, can I build a developer system running some IDE that can run Spring boot applications on Java on&hellip;",
            "content_html": "<h2><span data-preserver-spaces=\"true\">Story So Far, </span></h2>\n<p><span data-preserver-spaces=\"true\">Raspberry Pi Foundation, released an 8 GB RAM model of it's Raspberry Pi 4 this year along with USB booting. This thing got me thinking, can I build a developer system running some IDE that can run Spring boot applications on Java on a Docker container on Raspberry Pi 4. Can I make it my alternative backup development system out of it?</span></p>\n<p><span data-preserver-spaces=\"true\">We used to have a lecturer in University named Carl Reed, and in one of his classes, he told a story about why and how he bought the mobile phone. He had hearing problems so, he needed a loud phone. He couldn't see very well, so he needed something with </span><strong><span data-preserver-spaces=\"true\">\"clear large readable\"</span></strong><span data-preserver-spaces=\"true\"> text. Long story short, know whats your need, what's your requirement. Enough of this chit chat. </span><span data-preserver-spaces=\"true\">Let me try Karl Reed method for this project.</span></p>\n<h2>My Requirements</h2>\n<p>Most of my work these days are:</p>\n<ol>\n<li><span data-preserver-spaces=\"true\">On AWS / Azure on a Browser</span></li>\n<li><span data-preserver-spaces=\"true\">Designing Databases or Infrastructure or UML or a Drawing for self, Need a drawing tool, Visio Alternative.</span></li>\n<li><span data-preserver-spaces=\"true\">SSH into servers to set things up and remote login to Windows Servers, I need an RDP app.</span></li>\n<li><span data-preserver-spaces=\"true\">Writing Code in either Java or Go or Python or Ruby, Need IDE and compilers. I hear a lot of buzz about Rust. Maybe try to get that working as well.</span></li>\n<li><span data-preserver-spaces=\"true\">Doing a lot of documentation, I need a word processor and spreadsheet.</span></li>\n<li><span data-preserver-spaces=\"true\">Reading and Sending Emails, need an Email Client.</span></li>\n<li><span data-preserver-spaces=\"true\">Watching YouTube, need a Browser.</span></li>\n<li><span data-preserver-spaces=\"true\">Need a container, I need to get docker to work on raspberry pi. Well, it's not a need, but I wanna get started with containers.</span></li>\n<li><span data-preserver-spaces=\"true\">Eating, Sleeping and Waking up, I need a life.</span></li>\n</ol>\n<p><span data-preserver-spaces=\"true\">So if most of the <span style=\"text-decoration: underline;\">above</span> objectives can be done <span style=\"text-decoration: underline;\">on</span> a Raspberry pi 4, I think I can call it a successful project.</span></p>\n<h2><span data-preserver-spaces=\"true\">The Beginnings</span></h2>\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 50%;\">\n<h3><span data-preserver-spaces=\"true\">Hardware</span></h3>\n</td>\n<td style=\"width: 50%;\">\n<h3><span data-preserver-spaces=\"true\">Software</span></h3>\n</td>\n</tr>\n<tr>\n<td style=\"width: 50%;\">\n<ul>\n<li><span data-preserver-spaces=\"true\"> Raspberry Pi 4 8 GB</span></li>\n<li><span data-preserver-spaces=\"true\">120 GB Solid State Drive (SATA)</span></li>\n<li><span data-preserver-spaces=\"true\">SATA USB 3 Adapter</span></li>\n<li><span data-preserver-spaces=\"true\">Argon One Raspberry Pi 4 Case</span></li>\n<li><span data-preserver-spaces=\"true\">Monitor</span></li>\n<li><span data-preserver-spaces=\"true\">Keyboard and Mouse</span></li>\n</ul>\n</td>\n<td style=\"width: 50%;\">\n<ul>\n<li><span data-preserver-spaces=\"true\">Raspberry Pi OS ARM-64</span></li>\n<li><span data-preserver-spaces=\"true\">Visual Studio Code as IDE</span></li>\n<li><span data-preserver-spaces=\"true\">JDK 8</span></li>\n<li><span data-preserver-spaces=\"true\">Spring Boot</span></li>\n<li><span data-preserver-spaces=\"true\">Golang SDK</span></li>\n<li><span data-preserver-spaces=\"true\">Python 3.0</span></li>\n<li><span data-preserver-spaces=\"true\">Evolution as Email Client</span></li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<h2><span data-preserver-spaces=\"true\">Setting Up The Hardware</span></h2>\n<p><span data-preserver-spaces=\"true\">Raspberry Pi is a single-board computer and does not need much setting up. However, since I was planning on overclocking my Pi, I needed a cooling solution. As on the bare machine, I would see CPU throttling issues as things heated up. Raspberry Pi 4 starts throttling around 80°C. </span></p>\n<p> </p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-columns=\"2\">\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Raspberry_Pi_4_Hero.jpg\" data-size=\"3200x1729\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Raspberry_Pi_4_Hero-thumbnail.jpg\" alt=\"\" width=\"720\" height=\"389\"></a>\n<figcaption>My Raspberry Pi 4 8 GB.</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Argon-One-Raspberry-Pi-4-Case-md.png\" data-size=\"768x533\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Argon-One-Raspberry-Pi-4-Case-md-thumbnail.png\" alt=\"\" width=\"720\" height=\"500\"></a>\n<figcaption>Home of my Raspberry Pi 4</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/StockSSDImage.jpg\" data-size=\"1024x780\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/StockSSDImage-thumbnail.jpg\" alt=\"\" width=\"720\" height=\"548\"></a>\n<figcaption>Stock Image of My SSD. Sorry I don't have a blog level professional Camera. So Stock Image it is.</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/USBSSDAdapter.jpg\" data-size=\"1500x1500\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/USBSSDAdapter-thumbnail.jpg\" alt=\"\" width=\"720\" height=\"720\"></a>\n<figcaption>USB 3.0 Sata Adapter. This connects the Raspberry Pi to the SSD.</figcaption>\n</figure>\n</div></div>\n<p><span data-preserver-spaces=\"true\">So I bought <strong>Argon One Pi 4 Case,</strong> it has active and passive cooling. Meaning it's got a fan which switches on when the temperature exceeds 55°C. I configured the fan profile as the table below. </span></p>\n<table style=\"border-collapse: collapse; width: 100%; height: 200px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 50px;\">\n<td class=\"align-center\" style=\"width: 50%; height: 50px;\"><strong>CPU Temperature</strong></td>\n<td class=\"align-center\" style=\"width: 50%; height: 50px;\"><strong>Fan Power</strong></td>\n</tr>\n<tr style=\"height: 50px;\">\n<td class=\"align-center\" style=\"width: 50%; height: 50px;\"><span data-preserver-spaces=\"true\">55°C</span></td>\n<td class=\"align-center\" style=\"width: 50%; height: 50px;\">35%</td>\n</tr>\n<tr style=\"height: 50px;\">\n<td class=\"align-center\" style=\"width: 50%; height: 50px;\"><span data-preserver-spaces=\"true\">60°C</span></td>\n<td class=\"align-center\" style=\"width: 50%; height: 50px;\">55%</td>\n</tr>\n<tr style=\"height: 50px;\">\n<td class=\"align-center\" style=\"width: 50%; height: 50px;\"><span data-preserver-spaces=\"true\">65°C</span></td>\n<td class=\"align-center\" style=\"width: 50%; height: 50px;\">100%</td>\n</tr>\n</tbody>\n</table>\n<p><span data-preserver-spaces=\"true\">I ran stress tests, and I never managed to get the temperature higher than 52°C, Even in a non AC room in the middle of the Indian summer.</span></p>\n<h2>Setting Up The Software</h2>\n<p>Setting up the software requires 2 steps. Making a the SATA SSD bootable. And then customizing the OS and in my case overclocking the PI.</p>\n<h3>Download OS Image</h3>\n<p>Raspberry Pi OS 64 bit is based on Debian Buster and well still in beta at the time of writing. To download it I used the link below.</p>\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 100%;\">https://downloads.raspberrypi.org/raspios_arm64/images/raspios_arm64-2020-05-28/2020-05-27-raspios-buster-arm64.zip</td>\n</tr>\n</tbody>\n</table>\n<h3>Create Bootable SSD</h3>\n<p>There are two tools that people use to write Images to SD Card or USB drives. Basically glorified dd command.</p>\n<ol>\n<li>balenaEtcher</li>\n<li>Raspberry Pi Imager</li>\n</ol>\n<p>I used Raspberry Pi Imager on my Windows Laptop.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-columns=\"8\">\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Capture1.PNG\" data-size=\"682x452\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Capture1-thumbnail.PNG\" alt=\"\" width=\"682\" height=\"452\"></a>\n<figcaption>Start Raspberry Pi Imager and Choose OS -&gt; Custom</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Capture2.PNG\" data-size=\"649x440\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Capture2-thumbnail.PNG\" alt=\"\" width=\"649\" height=\"440\"></a>\n<figcaption>Select OS Image file</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Capture3.PNG\" data-size=\"682x452\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Capture3-thumbnail.PNG\" alt=\"\" width=\"682\" height=\"452\"></a>\n<figcaption>Choose Connected USB SSD Drive.</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Capture4.PNG\" data-size=\"682x452\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Capture4-thumbnail.PNG\" alt=\"\" width=\"682\" height=\"452\"></a>\n<figcaption>Click on \"Write\" to write Image</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Capture5.PNG\" data-size=\"682x452\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Capture5-thumbnail.PNG\" alt=\"\" width=\"682\" height=\"452\"></a>\n<figcaption>Usual I will delete you data warning. Be confidant and say yes. :P</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Capture6.PNG\" data-size=\"682x452\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Capture6-thumbnail.PNG\" alt=\"\" width=\"682\" height=\"452\"></a>\n<figcaption>Writing the Data Begins</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Capture7.PNG\" data-size=\"682x452\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Capture7-thumbnail.PNG\" alt=\"\" width=\"682\" height=\"452\"></a>\n<figcaption>Checks if the Data Written is OK. This tool has some confidence issues.</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Capture8.PNG\" data-size=\"682x452\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Capture8-thumbnail.PNG\" alt=\"\" width=\"682\" height=\"452\"></a>\n<figcaption>All Done. Lets plug her in and boot up the PI.</figcaption>\n</figure>\n</div></div>\n<h3>Install Software based on requirement</h3>\n<p>Now I need to install some software which I used to use when I had a Linux Desktop. And also other things such as Visual Studio Code OSS. Open a Terminal and type it in.</p>\n<table style=\"border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 10px;\" width=\"699\">\n<tbody>\n<tr>\n<th style=\"width: 700.8px;\">\n<p><span style=\"color: #2dc26b;\"># sudo apt-get update <br># sudo apt-get dist-upgrade <br><br># sudo apt-get install libreoffice <br># sudo apt-get install evolution <br></span></p>\n<p><span style=\"color: #2dc26b;\"># sudo su<br># . &lt;( wget -O - https://code.headmelted.com/installers/apt.sh )<br></span></p>\n<p><span style=\"color: #2dc26b;\"># sudo apt-get autoclean <br># sudo apt-get autoremove <br># sudo init 6 </span></p>\n</th>\n</tr>\n</tbody>\n</table>\n<h3>Overclocking the Raspberry Pi</h3>\n<p>Please do this at your own risk. Overclocking is safe if you have a proper cooling solution. If anything burns well sorry about that, you may need to shell out another $75 for a new PI 4. And if it doesn't burn buy me some beer.</p>\n<table style=\"border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 10px;\" width=\"699\">\n<tbody>\n<tr>\n<th style=\"width: 700.8px;\">\n<p><span style=\"color: #2dc26b;\"># sudo nano /boot/config.txt </span></p>\n</th>\n</tr>\n</tbody>\n</table>\n<p>Add These Lines to the eof</p>\n<table style=\"border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 10px;\" width=\"699\">\n<tbody>\n<tr>\n<th style=\"width: 700.8px;\">\n<p><span style=\"color: #2dc26b;\"># Overclocking begins<br>over_voltage=8<br>arm_freq=2147<br>gpu_freq=750 </span></p>\n</th>\n</tr>\n</tbody>\n</table>\n<h4>Test Scores Before Overclocking</h4>\n<p>----------------------------------------------------------------------------<br>AndBench Started...<br>----------------------------------------------------------------------------<br>CPU Score : 50<br>Write Speed Score : 39<br>Read Speed Score : 41</p>\n<h4>Test Scored After Overclocking</h4>\n<p>----------------------------------------------------------------------------<br>AndBench Started...<br>----------------------------------------------------------------------------<br>CPU Score : 35<br>Write Speed Score : 29<br>Read Speed Score : 27</p>\n<h4><span data-preserver-spaces=\"true\">Testing Method </span></h4>\n<p><span data-preserver-spaces=\"true\">Andbench is a set of C code I copied from all over the internet.</span></p>\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 100%;\"><span data-preserver-spaces=\"true\">https://github.com/anindyabiswasio/Andbench.git</span></td>\n</tr>\n</tbody>\n</table>\n<p><span data-preserver-spaces=\"true\">The tests it performs are :</span></p>\n<ol>\n<li><span data-preserver-spaces=\"true\">Prime number Integer Test with 20 Threads and Primes to find 10000000</span></li>\n<li><span data-preserver-spaces=\"true\">Storage Sequential 500 MB Write and Read Test.</span></li>\n</ol>\n<h3>Desktop</h3>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-columns=\"1\">\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Desktop-2.png\" data-size=\"2560x1440\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Desktop-2-thumbnail.png\" alt=\"\" width=\"720\" height=\"405\"></a>\n<figcaption>Desktop is Ready... Every time I see this color I want to lick my screen. Must be a mental bug.</figcaption>\n</figure>\n</div></div>\n<h3>Email and Browsers</h3>\n<p><span data-preserver-spaces=\"true\">For Browsers and Emails, I am using the default browser Chromium and </span></p>\n<p><span data-preserver-spaces=\"true\">Evolution Email Client. Email Client took a few minutes of configuration and I was able to connect to </span><strong><span data-preserver-spaces=\"true\">Amazon Workmail</span></strong><span data-preserver-spaces=\"true\">, SMTP and IMAP servers without any major hassles. Later I tried Gmail and that worked perfectly as well.</span></p>\n<p><span data-preserver-spaces=\"true\">As for Chromium, it behaves just like all chromium installs, however, one problem seems to be 1080p Video playback. Hardware acceleration is missing so I got a lot of dropped frames while watching how to make Chicken Marsala (Covid Effect :P ). 649 out of 2402 frames were dropped in Stats for nerds in YouTube. Maybe Hardware acceleration will fix this issue in the long run. Later I found there is a bug which was causing this so maybe by the time anyone reads this issue should be fixed.</span></p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-columns=\"2\">\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/EmailClient.png\" data-size=\"2560x1405\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/EmailClient-thumbnail.png\" alt=\"\" width=\"720\" height=\"395\"></a>\n<figcaption>Evolution Email Client. A lot like Outlook but free and loads fast on Raspberry Pi 4</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Screenshot-from-2020-08-10-16-03-37.png\" data-size=\"2560x1440\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Screenshot-from-2020-08-10-16-03-37-thumbnail.png\" alt=\"\" width=\"720\" height=\"405\"></a>\n<figcaption>Youtube Video with dropped frames. I wish this was better. 649 out of 2402 frames dropped :P. Maybe Hardware acceleration will fix this issue.</figcaption>\n</figure>\n</div></div>\n<h3><span data-preserver-spaces=\"true\">An Office Alternate</span></h3>\n<p><span data-preserver-spaces=\"true\">I installed LibreOffice as an Office suite. I wanted to get version 7.0 but repository had 6.x version and that was fine I guess. It does everything alright. Maybe not as good looking like Microsoft's version of Office Suite but does the job.</span></p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Screenshot-from-2020-08-10-16-07-22.png\" data-size=\"2560x1405\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Screenshot-from-2020-08-10-16-07-22-thumbnail.png\" alt=\"\" width=\"720\" height=\"395\"></a>\n<figcaption>Visio Drawings Open at least. Though not as intuitive as Visio. But gets the job done.</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/Excel.png\" data-size=\"1330x1118\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/Excel-thumbnail.png\" alt=\"\" width=\"720\" height=\"605\"></a>\n<figcaption>Opens up my AWS Planning sheet perfectly.</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/OfficeTools.png\" data-size=\"453x486\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/OfficeTools-thumbnail.png\" alt=\"\" width=\"453\" height=\"486\"></a>\n<figcaption>Office tools with Libra office.</figcaption>\n</figure>\n</div></div>\n<h3>Development Environment</h3>\n<h4>Spring Boot Project</h4>\n<p>To install, launch VS Code and from the Extensions view (Ctrl+Shift+X), search and Install</p>\n<h5>Install Addons</h5>\n<table style=\"border-collapse: collapse; width: 100%; height: 79px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 79px;\">\n<td style=\"width: 100%; height: 79px;\">vscode-spring-initializr<br>vscjava.vscode-java-pack</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/FirstLaunchVSCode.png\" data-size=\"2560x1440\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/FirstLaunchVSCode-thumbnail.png\" alt=\"\" width=\"720\" height=\"405\"></a>\n<figcaption>First Launch Visual Studio Code</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/InstallSpringInitializer.png\" data-size=\"2560x1440\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/InstallSpringInitializer-thumbnail.png\" alt=\"\" width=\"720\" height=\"405\"></a>\n<figcaption>Install Spring Initializer</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/InstallJavaExpansionPack.png\" data-size=\"2560x1405\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/InstallJavaExpansionPack-thumbnail.png\" alt=\"\" width=\"720\" height=\"395\"></a>\n<figcaption>Install Java Addon</figcaption>\n</figure>\n</div></div>\n<h5>Create Project and Run</h5>\n<p>(Ctrl+Shift+P) and type Spring Initializr to start generating a Maven project and then follow the wizard.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-columns=\"7\">\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/1CreateProject.png\" data-size=\"2560x1440\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/1CreateProject-thumbnail.png\" alt=\"\" width=\"720\" height=\"405\"></a>\n<figcaption>Create Project (Ctrl+Shift+P)</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/2SpecifyLanguage.png\" data-size=\"2560x1440\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/2SpecifyLanguage-thumbnail.png\" alt=\"\" width=\"720\" height=\"405\"></a>\n<figcaption>Specify Language</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/3SpecifyPackageName.png\" data-size=\"2560x1440\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/3SpecifyPackageName-thumbnail.png\" alt=\"\" width=\"720\" height=\"405\"></a>\n<figcaption>Specify Package Name</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/4SpringBootVersion.png\" data-size=\"2560x1440\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/4SpringBootVersion-thumbnail.png\" alt=\"\" width=\"720\" height=\"405\"></a>\n<figcaption>Select Spring Boot Version</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/5DependencySelection.png\" data-size=\"2560x1440\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/5DependencySelection-thumbnail.png\" alt=\"\" width=\"720\" height=\"405\"></a>\n<figcaption>Dependency Selection</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/6RunWithoutDebug.png\" data-size=\"2560x1440\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/6RunWithoutDebug-thumbnail.png\" alt=\"\" width=\"720\" height=\"405\"></a>\n<figcaption>Run without Debug</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"http://anindyabiswas.io/media/posts/12/gallery/7RunWithDebug.png\" data-size=\"2560x1440\"><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/12/gallery/7RunWithDebug-thumbnail.png\" alt=\"\" width=\"720\" height=\"405\"></a>\n<figcaption>Run With Debug and Break Point</figcaption>\n</figure>\n</div></div>\n<h2><span data-preserver-spaces=\"true\">Hopes from a Future Raspberry Pi</span></h2>\n<p><span data-preserver-spaces=\"true\">I personally think this 8 GB model is perfect for my purposes. I could almost do all the things in the Karl Reed method. Perhaps hoping to have a life was a bit too much to ask for from a Raspberry Pi. This is my third pi, and I am feeling optimistic about its future. The first one was a 3 which I use for a Pi-Hole to make adverts disappear on my home network. The second was a 3b+, and I connected a 4TB HDD to it, Home NAS Setup. And there is this one.</span></p>\n<p><span data-preserver-spaces=\"true\">However, I would hope the Raspberry foundation to come up something with</span></p>\n<ol>\n<li><span data-preserver-spaces=\"true\">A better CPU and GPU. Make it a full-blown developer machine.</span></li>\n<li><span data-preserver-spaces=\"true\">Microsoft should support Windows 10 for ARM on these boards and for free with development tools if they ever want to transition to the ARM Processor as apple did.</span></li>\n<li><span data-preserver-spaces=\"true\">I would be a lot more confident deploying apps on AWS Graviton Processors Instances if I could make them work on an arm machine. Rather than cross-compiling.</span></li>\n<li><span data-preserver-spaces=\"true\">Linux needs to have more developers on board with ARM.</span></li>\n</ol>\n<p><span data-preserver-spaces=\"true\">Hopes aside I love what Raspberry Pi foundation does, making these things so affordable. They made computers exciting again. </span></p>\n<p><span data-preserver-spaces=\"true\">Thanks for reminding me why I chose this as a profession.</span></p>\n<h2><strong><span data-preserver-spaces=\"true\">Useful Links</span></strong></h2>\n<ol>\n<li><span data-preserver-spaces=\"true\"><a href=\"https://www.raspberrypi.org/documentation/configuration/config-txt/overclocking.md\">https://www.raspberrypi.org/documentation/configuration/config-txt/overclocking.md</a><a target=\"_blank\" href=\"https://www.raspberrypi.org/documentation/configuration/config-txt/overclocking.md\" class=\"_e75a791d-denali-editor-page-rtfLink\" rel=\"noopener\"></a></span></li>\n<li><a href=\"https://www.tomshardware.com/how-to/boot-raspberry-pi-4-usb\">https://www.tomshardware.com/how-to/boot-raspberry-pi-4-usb</a></li>\n</ol>",
            "image": "http://anindyabiswas.io/media/posts/12/splashraspberry.jpg",
            "author": {
                "name": "Anindya Biswas"
            },
            "tags": [
                   "Raspberry Pi",
                   "Programming",
                   "Linux"
            ],
            "date_published": "2020-08-13T11:36:19+05:30",
            "date_modified": "2020-08-13T11:36:19+05:30"
        },
        {
            "id": "http://anindyabiswas.io/a-load-balanced-solution-and-horizontal-scaling.html",
            "url": "http://anindyabiswas.io/a-load-balanced-solution-and-horizontal-scaling.html",
            "title": "A Load Balanced solution and Scaling-Out Design",
            "summary": "Story So Far, We had a client for who we made an end-user mobile application that we had build and build the backend systems with usual connectors to connect to their backend APIs which then connected to SAP backends. Seems to be a usual gig where&hellip;",
            "content_html": "<h4><strong><span data-preserver-spaces=\"true\">Story So Far, </span></strong></h4>\n<p><span data-preserver-spaces=\"true\">We had a client for who we made an end-user mobile application that we had build and build the backend systems with usual connectors to connect to their backend APIs which then connected to SAP backends.</span></p>\n<p><span data-preserver-spaces=\"true\">Seems to be a usual gig where the mobile application would first talk to our server which had it's own MongoDB and PostgresDB and have some bridging APIs to connect to Client APIs. When the field testing started, however, something interesting happened. Suddenly we saw a spike in the server loads on our AWS T1.small servers were let's say from a lack of a better word went \"</span><strong><em><span data-preserver-spaces=\"true\">Belly up</span></em></strong><span data-preserver-spaces=\"true\">\". As it turns out, their marketing team had announced the application to 30k users, and it was a disaster. We went from T1.Small Instances to T1.XXLarge Instances and boy it was complete mayhem. Long story condensed we failed, Scaling-Up does not help. They did have the application running for a while and then they got rid of it. Total humiliation and somehow I felt responsible for this failure.</span></p>\n<figure class=\"post__image post__image--center\" ><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/10/HClientArchitecture.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"http://anindyabiswas.io/media/posts/10/responsive/HClientArchitecture-xs.png 300w ,http://anindyabiswas.io/media/posts/10/responsive/HClientArchitecture-sm.png 480w ,http://anindyabiswas.io/media/posts/10/responsive/HClientArchitecture-md.png 768w ,http://anindyabiswas.io/media/posts/10/responsive/HClientArchitecture-lg.png 1024w ,http://anindyabiswas.io/media/posts/10/responsive/HClientArchitecture-xl.png 1360w ,http://anindyabiswas.io/media/posts/10/responsive/HClientArchitecture-2xl.png 1600w\"  alt=\"\">\n<figcaption >The recipe for disaster</figcaption>\n</figure>\n<blockquote>\n<p><span data-preserver-spaces=\"true\">But what is the point of failure if I don't learn from it. I said that to myself and started learning about infrastructure and scaling etc.</span></p>\n</blockquote>\n<p><span data-preserver-spaces=\"true\">And here is what we learned</span></p>\n<ol>\n<li><span data-preserver-spaces=\"true\">Our Servers behaved fine as long as the requests dealt with only PostgreSQL and MongoDB, however by that time T1 generation AWS instances were old.</span></li>\n<li><span data-preserver-spaces=\"true\">We had some problems internally where one service would call another service internally, there was a bottleneck there. I will write a separate blog on how we went around diagnosing the problem.</span></li>\n<li><span data-preserver-spaces=\"true\">Our biggest bottleneck was when we were calling API that the client had given us. Under load, the response time went up anywhere from 500ms to 15000ms. Which meant once a user submitted a request, wait indicator would keep spinning on the device they would lose hope and give up. Even when their transaction was complete. It was all synchronous.</span></li>\n<li><span data-preserver-spaces=\"true\">And I figured we didn't know enough and as Engineers, that's a feeling of failure.</span></li>\n</ol>\n<h4><strong><span data-preserver-spaces=\"true\">Time for a Shift in Though</span></strong></h4>\n<p><span data-preserver-spaces=\"true\">Once we identified what caused all the failure specific first task in hand was to find and correct everything from the ground up. The first challenge was Upgrading User Instances from T1 generation to T2. The only issue is T1 generation instances were paravirtual (PV) while T2 was Hardware Virtual Machine(HVM). So I embarked on a 1-month journey to upgrade the VMs, it was not just upgrading the OS from Ubuntu 10.04 to 18.04 but also a lot of legacies had to be upgraded, Java Version, Ruby Gem files etc. It's not as easy as it seems as I had to rewrite a lot of java code to support the latest PostgreSQL(JDBC) and Mongo drivers.</span></p>\n<p><span data-preserver-spaces=\"true\">Next stage was to have a clear separation of services. We had two servers running Glassfish which ran 2 different sets services. And a ruby server that did it's own things. We were planning to move towards micro services in the future, so we decided to break down the jumbled mess of services into individual services that would run in Glassfish for the time being, till we had enough resources and time to convert and run them on docker containers. Ultimately moving all our services running on user instances servers and move them to work on Kubernetes clusters.  </span></p>\n<p><span data-preserver-spaces=\"true\">We planned a RabbitMQ plugins for any future need to connect to unreliable services. So problem 3 above could be sorted more efficiently and Asynchronously.</span></p>\n<h4><span data-preserver-spaces=\"true\">An <span style=\"font-size: 21.8684px;\">Optimized</span> and improved system</span></h4>\n<p><span data-preserver-spaces=\"true\">We got another client last year the same scale as before this app was again an End User application Expected load of 10k users to begin with, till they can roll-out countrywide when they expect around 50k+ users for both Mobile and Web Application. Their prerequisite was they want to run it in Azure in the data center of the country of operation. And maybe in the future move all systems in-house or a VMWare or something called Nutanix Enterprise Cloud. </span></p>\n<p><span data-preserver-spaces=\"true\">Also, they wanted to migrate their MongoDB to PostgresqlDB, as manpower for the later is easier to find. </span></p>\n<p><span data-preserver-spaces=\"true\">With the prerequisites set we designed the following simplistically put.</span></p>\n<figure class=\"post__image post__image--center\" ><img loading=\"lazy\" src=\"http://anindyabiswas.io/media/posts/10/TClientArchitecture.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"http://anindyabiswas.io/media/posts/10/responsive/TClientArchitecture-xs.png 300w ,http://anindyabiswas.io/media/posts/10/responsive/TClientArchitecture-sm.png 480w ,http://anindyabiswas.io/media/posts/10/responsive/TClientArchitecture-md.png 768w ,http://anindyabiswas.io/media/posts/10/responsive/TClientArchitecture-lg.png 1024w ,http://anindyabiswas.io/media/posts/10/responsive/TClientArchitecture-xl.png 1360w ,http://anindyabiswas.io/media/posts/10/responsive/TClientArchitecture-2xl.png 1600w\"  alt=\"Client Infra design Plan Overview\">\n<figcaption >Clients Server Architecture Design Simplified</figcaption>\n</figure>\n<div>Instead of loading and clogging one Instance we have 2, to begin with, and scale up to 5 instances. Load balancer rules were set on trying to connect on port 443 (https). In the future, if the load continues to grow we may just horizontally scale the infrastructure.</div>\n<div> </div>\n<div>Support Server for the moment is tasked with running Cron services (Maintenance Scripts, DB Compact, Backup to Cloud Storage and so on) and Some micro services for exposing out DB to Client's Existing services. Please note we didn't talk about security implementation for this design as it is a topic of another blog.</div>\n<div> </div>\n<div>However so far, no major issues with the existing system. I think we managed to get things in order with this design. However, the idea is to move away from these traditional designs and make something better. Use containers and container orchestration and all that jazz. I definitely want to move in that direction in the future once I know the pitfalls and benefits for that. But I am a firm believer of the \"KISS\" philosophy and the idea of micro services seems to be a step in that direction.</div>",
            "image": "http://anindyabiswas.io/media/posts/10/splash1.jpg",
            "author": {
                "name": "Anindya Biswas"
            },
            "tags": [
                   "Design",
                   "Cloud Computing"
            ],
            "date_published": "2020-08-13T11:36:19+05:30",
            "date_modified": "2020-08-13T11:36:19+05:30"
        },
        {
            "id": "http://anindyabiswas.io/aws-ubuntu-instance-to-azure-or-vmware-migration.html",
            "url": "http://anindyabiswas.io/aws-ubuntu-instance-to-azure-or-vmware-migration.html",
            "title": "AWS Ubuntu 18.04 Instance to Azure or VMWare Migration or Any Other Virtualization",
            "summary": "Story So Far, The company I work for uses AWS as a primary cloud provider. The product that I worked on is a tool that made Mobile applications. Now when we started getting Corporate/Enterprise customers, They started to ask for On-Premises deployment on either a VMWare Environment, Nutanix Enterprise Cloud,&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1eca0ciqp2r\">Story So Far</a></li>\n<li><a href=\"#mcetoc_1eca17npv30\">The Process</a>\n<ul>\n<li><a href=\"#mcetoc_1eca2a6sa35\">Step 1: Enable Root Access of AWS Instance via SSH</a></li>\n<li><a href=\"#mcetoc_1eca2dc8a48\">Step 2: Stop All Services on AWS Instance</a></li>\n<li><a href=\"#mcetoc_1eca2dc8a49\">Step 3: Create Azure Virtual Machine or VMWare</a></li>\n<li><a href=\"#mcetoc_1eca2dc8a4a\">Step 4: Start the migration</a></li>\n<li><a href=\"#mcetoc_1eca2dc8a4b\">Step 5: Install Azure Kernel</a></li>\n<li><a href=\"#mcetoc_1eca2dc8a4c\">Step 6: Perform Cleanup</a></li>\n<li><a href=\"#mcetoc_1eca2dc8a4d\">Step 7: Azure Agent</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1eca0bf8f2p\">References</a></li>\n<li><a href=\"#mcetoc_1eca5jfib4p\">Contact Me</a></li>\n<li><a href=\"#mcetoc_1eca6qchr5c\">Document History</a></li>\n</ul>\n</div>\n<h4 id=\"mcetoc_1eca0ciqp2r\">Story So Far, </h4>\n<p><span data-preserver-spaces=\"true\">The company I work for uses AWS as a primary cloud provider. The product that I worked on is a tool that made Mobile applications. Now when we started getting Corporate/Enterprise customers, They started to ask for On-Premises deployment on either a </span><strong><span data-preserver-spaces=\"true\">VMWare</span></strong><span data-preserver-spaces=\"true\"> Environment, </span><strong><span data-preserver-spaces=\"true\">Nutanix</span></strong><span data-preserver-spaces=\"true\"> Enterprise Cloud, or on their Azure Instances in their accounts. Some organizations used AWS so it was easy, we would just share the AMI for the AWS Images and be done with it. However, the challenge was when they wanted deployments of production on their cloud or On-premises solutions. </span></p>\n<p><span data-preserver-spaces=\"true\">After failing a few times I found a way to reliably moving around across any Virtualization System.</span></p>\n<h4 id=\"mcetoc_1eca17npv30\">The Process</h4>\n<p><span data-preserver-spaces=\"true\">The idea behind this is a simple one. We just copy all the files in the root (/) from a </span><strong><span data-preserver-spaces=\"true\">Source</span></strong><span data-preserver-spaces=\"true\"> instance to </span><strong><span data-preserver-spaces=\"true\">Destination </span></strong><span data-preserver-spaces=\"true\">Instance.</span></p>\n<p><span data-preserver-spaces=\"true\">Here are the steps I performed.</span></p>\n<h5 id=\"mcetoc_1eca2a6sa35\">Step 1: Enable Root Access of AWS Instance via SSH</h5>\n<p><span data-preserver-spaces=\"true\">On AWS </span><strong><span data-preserver-spaces=\"true\">\"root user\"</span></strong><span data-preserver-spaces=\"true\"> access is restricted via SSH and this is done on purpose for security reasons. However, we require root access as we will be copying system-level files.</span></p>\n<p><span data-preserver-spaces=\"true\">To do this we must do 3 things.</span></p>\n<ul style=\"list-style-type: square;\">\n<li><strong>Copy .ssh folder</strong> from Logged in User to /root folder, the purpose for this is to have the same key we use to login.</li>\n</ul>\n<table style=\"border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 10px;\" width=\"699\">\n<tbody>\n<tr>\n<th style=\"width: 700.8px;\"><span style=\"color: #2dc26b;\">sudo cp -R .ssh /root</span></th>\n</tr>\n</tbody>\n</table>\n<ul style=\"list-style-type: square;\">\n<li>Edit <strong>/etc/ssh/sshd_config</strong></li>\n</ul>\n<table style=\"border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 10px;\" width=\"699\">\n<tbody>\n<tr>\n<th style=\"width: 700.8px;\"><span style=\"color: #2dc26b;\">sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config</span></th>\n</tr>\n</tbody>\n</table>\n<ul style=\"list-style-type: square;\">\n<li>Restart <strong>SSH Service</strong></li>\n</ul>\n<table style=\"border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 10px;\" width=\"699\">\n<tbody>\n<tr>\n<th style=\"width: 700.8px;\"><span style=\"color: #2dc26b;\">sudo service ssh restart</span></th>\n</tr>\n</tbody>\n</table>\n<p>That should be it.</p>\n<h5 id=\"mcetoc_1eca2dc8a48\">Step 2: Stop All Services on AWS Instance</h5>\n<p>The purpose of this step is to make sure no process keeps some files in a locked state which may fail step 4. Like sometimes MongoDB or PostgreSQL may lock files that prevent it from copying. So List all services and Stop all of them.</p>\n<p class=\"align-center\"><span style=\"color: #e03e2d;\"><strong>\"Do not stop ssh service\"</strong></span></p>\n<h5 id=\"mcetoc_1eca2dc8a49\">Step 3: Create Azure Virtual Machine or VMWare</h5>\n<p>Here we want to create a Virtual Machine on either Azure or VMware. For VMWare I created a VMWare Workstation Image with Ubuntu 18.04 update it and rebooted it. The core idea is the system should be as close to the AWS Instance as possible in terms of updates. Not that it matters much as next step will remove everything you just installed.</p>\n<h5 id=\"mcetoc_1eca2dc8a4a\">Step 4: Start the migration</h5>\n<p>This process is for the actual migration of the user instance from AWS to Azure/VMWare. </p>\n<p>First we Upload the instance Key that we use to login to AWS to Azure/VMWare.</p>\n<p>Second we run this command to start the Syncing do not copy paste it, the explanation is below</p>\n<table style=\"border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 121px; width: 695px;\" width=\"1047\">\n<tbody>\n<tr>\n<th style=\"width: 721.6px;\">\n<p><span style=\"color: #2dc26b;\"># sudo su</span></p>\n<p><span style=\"color: #2dc26b;\"># rsync -ahPHAXx --delete --exclude={/dev/*,/proc/*,/sys/*,/run/*,/mnt/*,/media/*,/lost+found,/boot,/etc/fstab,/swapfile} -e \"ssh -i /home/ubuntu/instanceKey.pem\" root@ec2-54-299-20-38.ap-southeast-1.compute.amazonaws.com:/ /</span></p>\n</th>\n</tr>\n</tbody>\n</table>\n<p><strong>Command Explained <sup>[1]</sup></strong></p>\n<p><code>--delete                delete extraneous files from dest dirs</code></p>\n<p><strong>Purpose</strong>: We delete all files that don't belong to source AWS Instance FS.</p>\n<p><code>--exclude=PATTERN       exclude files matching PATTERN</code></p>\n<p><strong>Purpose</strong>: We delete all files except these files.</p>\n<p><code>-e, --rsh=COMMAND           specify the remote shell to use</code></p>\n<p><strong>Purpose</strong>: <span style=\"color: #000000;\">We use the command for Remote Connection. In our case it is :</span></p>\n<table style=\"border-collapse: collapse; width: 100%; height: 174px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 174px;\">\n<td style=\"width: 100%; height: 174px;\">\n<p>\"ssh -i /home/ubuntu/instanceKey.pem\" <a href=\"mailto:root@ec2-54-299-20-38.ap-southeast-1.compute.amazonaws.com:/\">root@ec2-54-299-20-38.ap-southeast-1.compute.amazonaws.com:/</a></p>\n<p>SSH Key: instanceKey.pem</p>\n<p>Instance IP: ec2-54-299-20-38.ap-southeast-1.compute.amazonaws.com</p>\n<p>The :/ at the end means start rsync from /</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"mcetoc_1eca2dc8a4b\">Step 5: Install Azure/VMWare Kernel</h5>\n<p>This step is actually very important if you want a bootable Virtual Machine. In the previous command your boot configuration is corrupt, as rsync has removed most of the configuration. To fix this we need to reinstall the kernel which will configure grub boot-loader.</p>\n<p><strong>Azure Kernel</strong></p>\n<table style=\"border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 121px;\" width=\"1047\">\n<tbody>\n<tr>\n<th style=\"width: 721.6px;\">\n<p><span style=\"color: #2dc26b;\"># sudo apt-get update</span></p>\n<p><span style=\"color: #2dc26b;\"># sudo apt-get install linux-modules-5.0.0-1036-azure linux-image-5.0.0-1036-azure linux-azure linux-image-azure linux-azure-headers-5.0.0-1036 linux-headers-5.0.0-1036-azure linux-headers-azure linux-azure-tools-5.0.0-1036 linux-tools-5.0.0-1036-azure linux-tools-azure linux-azure-cloud-tools-5.0.0-1036 linux-cloud-tools-5.0.0-1036-azure linux-cloud-tools-azure</span></p>\n</th>\n</tr>\n</tbody>\n</table>\n<p><strong>For VMWare Install Generic Kernel</strong></p>\n<table style=\"border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 10px;\" width=\"699\">\n<tbody>\n<tr>\n<th style=\"width: 700.8px;\">\n<p><span style=\"color: #2dc26b;\"># sudo apt-get update</span></p>\n<p><span style=\"color: #2dc26b;\"># </span><span style=\"color: #2dc26b; font-weight: var(--font-weight-semibold); font-family: var(--font-base); font-size: inherit;\">sudo apt-get install --install-recommends linux-generic-hwe-18.04</span></p>\n</th>\n</tr>\n</tbody>\n</table>\n<h5 id=\"mcetoc_1eca2dc8a4c\">Step 6: Perform Cleanup</h5>\n<p>AWS Systems Manager Agent (SSM Agent) is Amazon software that can be installed and configured on an EC2 instance.<sup>[2]</sup></p>\n<table style=\"border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 40px;\" width=\"694\">\n<tbody>\n<tr>\n<th style=\"width: 700.8px;\"><span style=\"color: #2dc26b;\">sudo snap remove amazon-ssm-agent</span></th>\n</tr>\n</tbody>\n</table>\n<h5 id=\"mcetoc_1eca2dc8a4d\">Step 7: Auto remove </h5>\n<p>Here we will remove all AWS Kernels</p>\n<table style=\"border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 40px;\" width=\"694\">\n<tbody>\n<tr>\n<th style=\"width: 700.8px;\"><span style=\"color: #2dc26b;\">sudo apt-get autoremove</span></th>\n</tr>\n</tbody>\n</table>\n<h5 id=\"mcetoc_1eca2dc8a4d\">Step 8: Azure Agent</h5>\n<p>The Microsoft Azure Linux Agent (waagent) manages Linux &amp; FreeBSD provisioning, and VM interaction with the Azure Fabric Controller.<sup>[3]</sup></p>\n<table style=\"border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 40px;\" width=\"694\">\n<tbody>\n<tr>\n<th style=\"width: 700.8px;\"><span style=\"color: #2dc26b;\">sudo apt-get install walinuxagent</span></th>\n</tr>\n</tbody>\n</table>\n<h5>References</h5>\n<p>[1] <a href=\"https://www.man7.org/linux/man-pages/man1/rsync.1.html\">https://www.man7.org/linux/man-pages/man1/rsync.1.html</a></p>\n<p>[2] <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent.html\">https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent.html</a></p>\n<p>[3] <a href=\"https://docs.microsoft.com/en-us/azure/virtual-machines/extensions/agent-linux\">https://docs.microsoft.com/en-us/azure/virtual-machines/extensions/agent-linux</a></p>\n<h4 id=\"mcetoc_1eca5jfib4p\">Contact Me</h4>\n<p>If you find errors in this Article or want to contribute to make this article better or just want to provide feedback, please contact me. I am new to blogging so excuse my noob mistakes.</p>\n<h4 id=\"mcetoc_1eca6qchr5c\">Document History</h4>\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 11.6808%;\"><strong>Version</strong></td>\n<td style=\"width: 43.4473%;\"><strong>Changes</strong></td>\n<td style=\"width: 44.8718%;\"><strong>Remark</strong></td>\n</tr>\n<tr>\n<td style=\"width: 11.6808%;\">0.1</td>\n<td style=\"width: 43.4473%;\">Just started this document. May change in time.</td>\n<td style=\"width: 44.8718%;\">Just started. Work in progress. Next Version Elaborate Step 4 and 7. Also Correct Grammar.</td>\n</tr>\n<tr>\n<td style=\"width: 11.6808%;\">0.2</td>\n<td style=\"width: 43.4473%;\">Made a few more additions</td>\n<td style=\"width: 44.8718%;\"> </td>\n</tr>\n</tbody>\n</table>\n<p> </p>",
            "image": "http://anindyabiswas.io/media/posts/9/splash1.jpg",
            "author": {
                "name": "Anindya Biswas"
            },
            "tags": [
                   "Linux",
                   "Cloud Computing"
            ],
            "date_published": "2020-08-13T11:36:19+05:30",
            "date_modified": "2020-08-13T11:36:19+05:30"
        },
        {
            "id": "http://anindyabiswas.io/why-start-a-blog-now.html",
            "url": "http://anindyabiswas.io/why-start-a-blog-now.html",
            "title": "Hello World",
            "summary": "Hi, I am Anindya. And I am starting a blog. Why you may ask. Well, I thought since I quit all social media, I might as well write things I care about and not care about likes and who reads it or who does not.",
            "content_html": "<div class=\"\" data-block=\"true\" data-editor=\"9nbpd\" data-offset-key=\"6kb6e-0-0\">\n<div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\" data-offset-key=\"6kb6e-0-0\">\n<p><span data-preserver-spaces=\"true\">Hi, I am Anindya. And I am starting a blog. Why you may ask. Well, I thought since I quit all social media, I might as well write things I care about and not care about likes and who reads it or who does not.</span></p>\n<p><span data-preserver-spaces=\"true\"> </span><span data-preserver-spaces=\"true\">With the SARS-CoV-2 situation, staying locked in the house for months now. I have had solid 2 months of looking inwards trying to figure things out what is it all about and decided, I should write about it. Keeping a diary but online.</span></p>\n<p><span data-preserver-spaces=\"true\"> </span><span data-preserver-spaces=\"true\">So I am starting this blog about things I love or the challenges I faced.</span></p>\n<p><span data-preserver-spaces=\"true\"> </span><span data-preserver-spaces=\"true\">Some of the categories I am going to write about are:</span></p>\n<ul>\n<li><span data-preserver-spaces=\"true\">Gaming</span></li>\n<li><span data-preserver-spaces=\"true\">Technology Related</span></li>\n<li><span data-preserver-spaces=\"true\">Fun Projects I worked on</span></li>\n</ul>\n<p><span data-preserver-spaces=\"true\">Let's see how it goes, so stay tuned.</span></p>\n</div>\n</div>",
            "image": "http://anindyabiswas.io/media/posts/6/splash0.jpg",
            "author": {
                "name": "Anindya Biswas"
            },
            "tags": [
                   "General Thoughts"
            ],
            "date_published": "2020-08-13T11:36:19+05:30",
            "date_modified": "2020-08-13T11:36:19+05:30"
        }
    ]
}
