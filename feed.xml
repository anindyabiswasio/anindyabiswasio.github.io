<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>anindyabiswas.io</title>
    <link href="http://anindyabiswas.io/feed.xml" rel="self" />
    <link href="http://anindyabiswas.io" />
    <updated>1970-01-01T05:30:00+05:30</updated>
    <author>
        <name>Anindya Biswas</name>
    </author>
    <id>http://anindyabiswas.io</id>

    <entry>
        <title>A Load Balanced solution and Horizontal Scaling</title>
        <author>
            <name>Anindya Biswas</name>
        </author>
        <link href="http://anindyabiswas.io/a-load-balanced-solution-and-horizontal-scaling.html"/>
        <id>http://anindyabiswas.io/a-load-balanced-solution-and-horizontal-scaling.html</id>

        <updated>2020-07-04T18:04:36+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="http://anindyabiswas.io/media/posts/10/splash1.jpg" alt="" />
                    Story So Far, We had a client for who we made an end-user mobile application that we had build and build the backend systems with usual connectors to connect to their backend APIs which then connected to SAP backends. Seems to be a usual gig where&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="http://anindyabiswas.io/media/posts/10/splash1.jpg" alt="" />
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1eccrrmj02b">Story So Far</a></li>
<li><a href="#mcetoc_1eccrrmj02c">Time for a Shift in Though</a></li>
<li><a href="#mcetoc_1eccrrmj02d">An Optimized and improved system</a></li>
</ul>
</div>
<h4 id="mcetoc_1eccrrmj02b"><strong><span data-preserver-spaces="true">Story So Far, </span></strong></h4>
<p><span data-preserver-spaces="true">We had a client for who we made an end-user mobile application that we had build and build the backend systems with usual connectors to connect to their backend APIs which then connected to SAP backends.</span></p>
<p><span data-preserver-spaces="true">Seems to be a usual gig where the mobile application would first talk to our server which had it's own MongoDB and PostgresDB and have some bridging APIs to connect to Client APIs. When the field testing started, however, something interesting happened. Suddenly we saw a spike in the server loads on our AWS T1.small servers were let's say from a lack of a better word went "</span><strong><em><span data-preserver-spaces="true">Belly up</span></em></strong><span data-preserver-spaces="true">". As it turns out, their marketing team had announced the application to 30k users, and it was a disaster. We went from T1.Small Instances to T1.XXLarge Instances and boy it was complete mayhem. Long story condensed we failed, Scaling up does not help. They did have the application running for a while and then they got rid of it. Total humiliation and somehow I felt responsible for this failure.</span></p>
<figure class="post__image post__image--center" ><img loading="lazy" src="http://anindyabiswas.io/media/posts/10/HClientArchitecture.png" sizes="(max-width: 48em) 100vw, 768px" srcset="http://anindyabiswas.io/media/posts/10/responsive/HClientArchitecture-xs.png 300w ,http://anindyabiswas.io/media/posts/10/responsive/HClientArchitecture-sm.png 480w ,http://anindyabiswas.io/media/posts/10/responsive/HClientArchitecture-md.png 768w ,http://anindyabiswas.io/media/posts/10/responsive/HClientArchitecture-lg.png 1024w ,http://anindyabiswas.io/media/posts/10/responsive/HClientArchitecture-xl.png 1360w ,http://anindyabiswas.io/media/posts/10/responsive/HClientArchitecture-2xl.png 1600w"  alt="">
<figcaption >The recipe for disaster</figcaption>
</figure>
<blockquote>
<p><span data-preserver-spaces="true">But what is the point of failure if I don't learn from it. I said that to myself and started learning about infrastructure and scaling etc.</span></p>
</blockquote>
<p><span data-preserver-spaces="true">And here is what we learned</span></p>
<ol>
<li><span data-preserver-spaces="true">Our Servers behaved fine as long as the requests dealt with only PostgreSQL and MongoDB, however by that time T1 generation AWS instances were old.</span></li>
<li><span data-preserver-spaces="true">We had some problems internally where one service would call another service internally, there was a bottleneck there. I will write a separate blog on how we went around diagnosing the problem.</span></li>
<li><span data-preserver-spaces="true">Our biggest bottleneck was when we were calling API that the client had given us. Under load, the response time went up anywhere from 500ms to 15000ms. Which meant once a user submitted a request, wait indicator would keep spinning on the device they would lose hope and give up. Even when their transaction was complete. It was all synchronous.</span></li>
<li><span data-preserver-spaces="true">And I figured we didn't know enough and as Engineers, that's a feeling of failure.</span></li>
</ol>
<h4 id="mcetoc_1eccrrmj02c"><strong><span data-preserver-spaces="true">Time for a Shift in Though,</span></strong></h4>
<p><span data-preserver-spaces="true">Once we identified what caused all the failure specific first task in hand was to find and correct everything from the ground up. The first challenge was Upgrading User Instances from T1 generation to T2. The only issue is T1 generation instances were paravirtual (PV) while T2 was Hardware Virtual Machine(HVM). So I embarked on a 1-month journey to upgrade the VMs, it was not just upgrading the OS from Ubuntu 10.04 to 18.04 but also a lot of legacies had to be upgraded, Java Version, Ruby Gem files etc. It's not as easy as it seems as I had to rewrite a lot of java code to support the latest PostgreSQL(JDBC) and Mongo drivers.</span></p>
<p><span data-preserver-spaces="true">Next stage was to have a clear separation of services. We had two servers running Glassfish which ran 2 different sets services. And a ruby server that did it's own things. We were planning to move towards microservices in the future, so we decided to break down the jumbled mess of services into individual services that would run in Glassfish for the time being, till we had enough resources and time to convert and run them on docker containers. Ultimately moving all our services running on user instances servers and move them to work on Kubernetes clusters.  </span></p>
<p><span data-preserver-spaces="true">We planned a RabbitMQ plugins for any future need to connect to unreliable services. So problem 3 above could be sorted more efficiently and Asynchronously.</span></p>
<h4 id="mcetoc_1eccrrmj02d"><span data-preserver-spaces="true">An <span style="font-size: 21.8684px;">Optimized</span> and improved system,</span></h4>
<p><span data-preserver-spaces="true">We got another client last year the same scale as before this app was again an End User application Expected load of 10k users to begin with, till they can roll-out countrywide when they expect around 50k+ users for both Mobile and Web Application. Their prerequisite was they want to run it in Azure in the data center of the country of operation. And maybe in the future move all systems in-house or a VMWare or something called Nutanix Enterprise Cloud. </span></p>
<p><span data-preserver-spaces="true">Also, they wanted to migrate their MongoDB to PostgresqlDB, as manpower for the later is easier to find. </span></p>
<p><span data-preserver-spaces="true">With the prerequisites set we designed the following simplistically put.</span></p>
<figure class="post__image post__image--center" ><img loading="lazy" src="http://anindyabiswas.io/media/posts/10/TClientArchitecture.png" sizes="(max-width: 48em) 100vw, 768px" srcset="http://anindyabiswas.io/media/posts/10/responsive/TClientArchitecture-xs.png 300w ,http://anindyabiswas.io/media/posts/10/responsive/TClientArchitecture-sm.png 480w ,http://anindyabiswas.io/media/posts/10/responsive/TClientArchitecture-md.png 768w ,http://anindyabiswas.io/media/posts/10/responsive/TClientArchitecture-lg.png 1024w ,http://anindyabiswas.io/media/posts/10/responsive/TClientArchitecture-xl.png 1360w ,http://anindyabiswas.io/media/posts/10/responsive/TClientArchitecture-2xl.png 1600w"  alt="Client Infra design Plan Overview">
<figcaption >Clients Server Architecture Design Simplified</figcaption>
</figure>
<p>So far no major issues with the existing system. I think we managed to get things in order with this design. However the idea is to move away from these traditional designs and make something better. Use containers and container orchestration. I definitely want to move in that direction in the future once I know the the pitfalls and benefits for that.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>AWS Ubuntu 18.04 Instance to Azure or VMWare Migration or Any Other Virtualization</title>
        <author>
            <name>Anindya Biswas</name>
        </author>
        <link href="http://anindyabiswas.io/aws-ubuntu-instance-to-azure-or-vmware-migration.html"/>
        <id>http://anindyabiswas.io/aws-ubuntu-instance-to-azure-or-vmware-migration.html</id>
            <category term="Linux"/>
            <category term="Cloud Computing"/>

        <updated>2020-07-04T18:04:36+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="http://anindyabiswas.io/media/posts/9/splash1.jpg" alt="" />
                    Story So Far, The company I work for uses AWS as a primary cloud provider. The product that I worked on is a tool that made Mobile applications. Now when we started getting Corporate/Enterprise customers, They started to ask for On-Premises deployment on either a VMWare Environment, Nutanix Enterprise Cloud,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="http://anindyabiswas.io/media/posts/9/splash1.jpg" alt="" />
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1eca0ciqp2r">Story So Far</a></li>
<li><a href="#mcetoc_1eca17npv30">The Process</a>
<ul>
<li><a href="#mcetoc_1eca2a6sa35">Step 1: Enable Root Access of AWS Instance via SSH</a></li>
<li><a href="#mcetoc_1eca2dc8a48">Step 2: Stop All Services on AWS Instance</a></li>
<li><a href="#mcetoc_1eca2dc8a49">Step 3: Create Azure Virtual Machine or VMWare</a></li>
<li><a href="#mcetoc_1eca2dc8a4a">Step 4: Start the migration</a></li>
<li><a href="#mcetoc_1eca2dc8a4b">Step 5: Install Azure Kernel</a></li>
<li><a href="#mcetoc_1eca2dc8a4c">Step 6: Perform Cleanup</a></li>
<li><a href="#mcetoc_1eca2dc8a4d">Step 7: Azure Agent</a></li>
</ul>
</li>
<li><a href="#mcetoc_1eca0bf8f2p">References</a></li>
<li><a href="#mcetoc_1eca5jfib4p">Contact Me</a></li>
<li><a href="#mcetoc_1eca6qchr5c">Document History</a></li>
</ul>
</div>
<h4 id="mcetoc_1eca0ciqp2r">Story So Far, </h4>
<p><span data-preserver-spaces="true">The company I work for uses AWS as a primary cloud provider. The product that I worked on is a tool that made Mobile applications. Now when we started getting Corporate/Enterprise customers, They started to ask for On-Premises deployment on either a </span><strong><span data-preserver-spaces="true">VMWare</span></strong><span data-preserver-spaces="true"> Environment, </span><strong><span data-preserver-spaces="true">Nutanix</span></strong><span data-preserver-spaces="true"> Enterprise Cloud, or on their Azure Instances in their accounts. Some organizations used AWS so it was easy, we would just share the AMI for the AWS Images and be done with it. However, the challenge was when they wanted deployments of production on their cloud or On-premises solutions. </span></p>
<p><span data-preserver-spaces="true">After failing a few times I found a way to reliably moving around across any Virtualization System.</span></p>
<h4 id="mcetoc_1eca17npv30">The Process</h4>
<p><span data-preserver-spaces="true">The idea behind this is a simple one. We just copy all the files in the root (/) from a </span><strong><span data-preserver-spaces="true">Source</span></strong><span data-preserver-spaces="true"> instance to </span><strong><span data-preserver-spaces="true">Destination </span></strong><span data-preserver-spaces="true">Instance.</span></p>
<p><span data-preserver-spaces="true">Here are the steps I performed.</span></p>
<h5 id="mcetoc_1eca2a6sa35">Step 1: Enable Root Access of AWS Instance via SSH</h5>
<p><span data-preserver-spaces="true">On AWS </span><strong><span data-preserver-spaces="true">"root user"</span></strong><span data-preserver-spaces="true"> access is restricted via SSH and this is done on purpose for security reasons. However, we require root access as we will be copying system-level files.</span></p>
<p><span data-preserver-spaces="true">To do this we must do 3 things.</span></p>
<ul style="list-style-type: square;">
<li><strong>Copy .ssh folder</strong> from Logged in User to /root folder, the purpose for this is to have the same key we use to login.</li>
</ul>
<table style="border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 10px;" width="699">
<tbody>
<tr>
<th style="width: 700.8px;"><span style="color: #2dc26b;">sudo cp -R .ssh /root</span></th>
</tr>
</tbody>
</table>
<ul style="list-style-type: square;">
<li>Edit <strong>/etc/ssh/sshd_config</strong></li>
</ul>
<table style="border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 10px;" width="699">
<tbody>
<tr>
<th style="width: 700.8px;"><span style="color: #2dc26b;">sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config</span></th>
</tr>
</tbody>
</table>
<ul style="list-style-type: square;">
<li>Restart <strong>SSH Service</strong></li>
</ul>
<table style="border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 10px;" width="699">
<tbody>
<tr>
<th style="width: 700.8px;"><span style="color: #2dc26b;">sudo service ssh restart</span></th>
</tr>
</tbody>
</table>
<p>That should be it.</p>
<h5 id="mcetoc_1eca2dc8a48">Step 2: Stop All Services on AWS Instance</h5>
<p>The purpose of this step is to make sure no process keeps some files in a locked state which may fail step 4. Like sometimes MongoDB or PostgreSQL may lock files that prevent it from copying. So List all services and Stop all of them.</p>
<p class="align-center"><span style="color: #e03e2d;"><strong>"Do not stop ssh service"</strong></span></p>
<h5 id="mcetoc_1eca2dc8a49">Step 3: Create Azure Virtual Machine or VMWare</h5>
<p>Here we want to create a Virtual Machine on either Azure or VMware. For VMWare I created a VMWare Workstation Image with Ubuntu 18.04 update it and rebooted it. The core idea is the system should be as close to the AWS Instance as possible in terms of updates. Not that it matters much as next step will remove everything you just installed.</p>
<h5 id="mcetoc_1eca2dc8a4a">Step 4: Start the migration</h5>
<p>This process is for the actual migration of the user instance from AWS to Azure/VMWare. </p>
<p>First we Upload the instance Key that we use to login to AWS to Azure/VMWare.</p>
<p>Second we run this command to start the Syncing do not copy paste it, the explanation is below</p>
<table style="border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 121px; width: 695px;" width="1047">
<tbody>
<tr>
<th style="width: 721.6px;"><span style="color: #2dc26b;">rsync -ahPHAXx --delete --exclude={/dev/*,/proc/*,/sys/*,/run/*,/mnt/*,/media/*,/lost+found,/boot,/etc/fstab,/swapfile} -e "ssh -i /home/ubuntu/instanceKey.pem" root@ec2-54-299-20-38.ap-southeast-1.compute.amazonaws.com:/ /</span></th>
</tr>
</tbody>
</table>
<p><strong>Command Explained <sup>[1]</sup></strong></p>
<p><code>--delete                delete extraneous files from dest dirs</code></p>
<p><strong>Purpose</strong>: We delete all files that don't belong to source AWS Instance FS.</p>
<p><code>--exclude=PATTERN       exclude files matching PATTERN</code></p>
<p><strong>Purpose</strong>: We delete all files except these files.</p>
<p><code>-e, --rsh=COMMAND           specify the remote shell to use</code></p>
<p><strong>Purpose</strong>: <span style="color: #000000;">We use the command for Remote Connection. In our case it is :</span></p>
<table style="border-collapse: collapse; width: 100%; height: 174px;" border="1">
<tbody>
<tr style="height: 174px;">
<td style="width: 100%; height: 174px;">
<p>"ssh -i /home/ubuntu/instanceKey.pem" <a href="mailto:root@ec2-54-299-20-38.ap-southeast-1.compute.amazonaws.com:/">root@ec2-54-299-20-38.ap-southeast-1.compute.amazonaws.com:/</a></p>
<p>SSH Key: instanceKey.pem</p>
<p>Instance IP: ec2-54-299-20-38.ap-southeast-1.compute.amazonaws.com</p>
<p>The :/ at the end means start rsync from /</p>
</td>
</tr>
</tbody>
</table>
<h5 id="mcetoc_1eca2dc8a4b">Step 5: Install Azure/VMWare Kernel</h5>
<p>This step is actually very important if you want a bootable Virtual Machine. In the previous command your boot configuration is corrupt, as rsync has removed most of the configuration. To fix this we need to reinstall the kernel which will configure grub boot-loader.</p>
<p><strong>Azure Kernel</strong></p>
<table style="border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 121px;" width="1047">
<tbody>
<tr>
<th style="width: 721.6px;"><span style="color: #2dc26b;">sudo apt-get install linux-modules-5.0.0-1036-azure linux-image-5.0.0-1036-azure linux-azure linux-image-azure linux-azure-headers-5.0.0-1036 linux-headers-5.0.0-1036-azure linux-headers-azure linux-azure-tools-5.0.0-1036 linux-tools-5.0.0-1036-azure linux-tools-azure linux-azure-cloud-tools-5.0.0-1036 linux-cloud-tools-5.0.0-1036-azure linux-cloud-tools-azure</span></th>
</tr>
</tbody>
</table>
<p><strong>For VMWare Install Generic Kernel</strong></p>
<table style="border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 10px;" width="699">
<tbody>
<tr>
<th style="width: 700.8px;"><span style="color: #2dc26b;">sudo apt-get install --install-recommends linux-generic-hwe-18.04</span></th>
</tr>
</tbody>
</table>
<h5 id="mcetoc_1eca2dc8a4c">Step 6: Perform Cleanup</h5>
<p>AWS Systems Manager Agent (SSM Agent) is Amazon software that can be installed and configured on an EC2 instance.<sup>[2]</sup></p>
<table style="border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 40px;" width="694">
<tbody>
<tr>
<th style="width: 700.8px;"><span style="color: #2dc26b;">sudo snap remove amazon-ssm-agent</span></th>
</tr>
</tbody>
</table>
<h5 id="mcetoc_1eca2dc8a4d">Step 7: Azure Agent</h5>
<p>The Microsoft Azure Linux Agent (waagent) manages Linux &amp; FreeBSD provisioning, and VM interaction with the Azure Fabric Controller.<sup>[3]</sup></p>
<table style="border-collapse: collapse; background-color: #000000; border-color: #3598db; border-style: outset; height: 40px;" width="694">
<tbody>
<tr>
<th style="width: 700.8px;"><span style="color: #2dc26b;">sudo apt-get install walinuxagent</span></th>
</tr>
</tbody>
</table>
<h4 id="mcetoc_1eca0bf8f2p">References</h4>
<p>[1] <a href="https://www.man7.org/linux/man-pages/man1/rsync.1.html">https://www.man7.org/linux/man-pages/man1/rsync.1.html</a></p>
<p>[2] <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent.html">https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent.html</a></p>
<p>[3] <a href="https://docs.microsoft.com/en-us/azure/virtual-machines/extensions/agent-linux">https://docs.microsoft.com/en-us/azure/virtual-machines/extensions/agent-linux</a></p>
<h4 id="mcetoc_1eca5jfib4p">Contact Me</h4>
<p>If you find errors in this Article or want to contribute to make this article better or just want to provide feedback, please contact me. I am new to blogging so excuse my noob mistakes.</p>
<h4 id="mcetoc_1eca6qchr5c">Document History</h4>
<table style="border-collapse: collapse; width: 100%;" border="1">
<tbody>
<tr>
<td style="width: 11.6808%;"><strong>Version</strong></td>
<td style="width: 43.4473%;"><strong>Changes</strong></td>
<td style="width: 44.8718%;"><strong>Remark</strong></td>
</tr>
<tr>
<td style="width: 11.6808%;">0.1</td>
<td style="width: 43.4473%;">Just started this document. May change in time.</td>
<td style="width: 44.8718%;">Just started. Work in progress. Next Version Elaborate Step 4 and 7. Also Correct Grammar.</td>
</tr>
<tr>
<td style="width: 11.6808%;">0.2</td>
<td style="width: 43.4473%;">Made a few more additions</td>
<td style="width: 44.8718%;"> </td>
</tr>
</tbody>
</table>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Hello World</title>
        <author>
            <name>Anindya Biswas</name>
        </author>
        <link href="http://anindyabiswas.io/why-start-a-blog-now.html"/>
        <id>http://anindyabiswas.io/why-start-a-blog-now.html</id>
            <category term="General Thoughts"/>

        <updated>2020-07-04T18:04:36+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="http://anindyabiswas.io/media/posts/6/splash0.jpg" alt="" />
                    Hi, I am Anindya. And I am starting a blog. Why you may ask. Well, I thought since I quit all social media, I might as well write things I care about and not care about likes and who reads it or who does not.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="http://anindyabiswas.io/media/posts/6/splash0.jpg" alt="" />
                <div class="" data-block="true" data-editor="9nbpd" data-offset-key="6kb6e-0-0">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr" data-offset-key="6kb6e-0-0">
<p><span data-preserver-spaces="true">Hi, I am Anindya. And I am starting a blog. Why you may ask. Well, I thought since I quit all social media, I might as well write things I care about and not care about likes and who reads it or who does not.</span></p>
<p><span data-preserver-spaces="true"> </span><span data-preserver-spaces="true">With the SARS-CoV-2 situation, staying locked in the house for months now. I have had solid 2 months of looking inwards trying to figure things out what is it all about and decided, I should write about it. Keeping a diary but online.</span></p>
<p><span data-preserver-spaces="true"> </span><span data-preserver-spaces="true">So I am starting this blog about things I love or the challenges I faced.</span></p>
<p><span data-preserver-spaces="true"> </span><span data-preserver-spaces="true">Some of the categories I am going to write about are:</span></p>
<ul>
<li><span data-preserver-spaces="true">Gaming</span></li>
<li><span data-preserver-spaces="true">Technology Related</span></li>
<li><span data-preserver-spaces="true">Fun Projects I worked on</span></li>
</ul>
<p><span data-preserver-spaces="true">Let's see how it goes, so stay tuned.</span></p>
</div>
</div>
            ]]>
        </content>
    </entry>
</feed>
